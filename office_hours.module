<?php
// $Id: office_hours.module,v 1.1.2.1.2.4 2009-04-04 10:42:48 ozeuss Exp $

/**
 * @file office_hours.module
 * Creates a field and widget for inserting working or office hours per day
 */

/**
 * Implementation of hook_menu().
 */
function office_hours_menu() {
  $items = array();
  $items['office_hours/get_week'] = array(
    'title' => 'Change week JavaScript callback',
    'page callback' => 'office_hours_page_get_week',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function office_hours_theme() {
  return array(
    'office_hours_formatter_default' => array (
      'arguments' => array('element' => NULL),
      'template' => 'office_hours_formatter_default',
      'file' => 'office_hours.theme.inc',
    ),
    'office_hours_week' => array(
    	'arguments' => array('element' => NULL),
      'file' => 'office_hours.theme.inc',
    ),
    'office_hours_format_day' => array(
      'arguments' => array('name' => NULL, 'open' => NULL, 'close' => NULL),
      'file' => 'office_hours.theme.inc',
    ),
  );
}

/**
 * Implementation of hook_init().
 */
function office_hours_init() {
    drupal_add_css(drupal_get_path('module', 'office_hours') .'/office_hours.css');
}

/**
 * Implementation of hook_content_is_empty().
 *
 * @return boolean
 *    TRUE if field item is considered empty.
 */
function office_hours_content_is_empty($item, $field) {
  // First check, we don't want rules without a scope.
  if (!isset($item['scope']) || empty($item['scope'])) {
    return TRUE;
  }

  // Check if one of the days have a open hour.
  foreach (_office_hours_day_names() as $name) {
    if (!empty($item[$name . '_open'])) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Implementation of hook_field_info().
 *
 * @return
 *   An array keyed by field type name. Each element of the array is an associative
 *   array with these keys and values:
 *   - "label": The human-readable label for the field type.
 */
function office_hours_field_info() {
  return array(
    'office_hours' => array(
    	'label' => 'Office Hours',
      'description' => t('Store office or opening hours in the database.'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 * Handle the parameters for a field.
 */
function office_hours_field_settings($op, $field) {
  switch ($op) {
    case 'database columns':
      $columns = array();

      $columns['scope'] = array(
        'type' => 'varchar',
        'length' => '10',
        'description' => t('Scope for this office hours record, one of "all", "odd", "even", "week" or "week_range".'),
      );

      $columns['week_start'] = array(
        'type' => 'varchar',
        'length' => '10',
        'description' => t('Week where this rule starts, specified as a ISO 8601 formatted week number ("2009W07").'),
      );

      $columns['week_end'] = array(
        'type' => 'varchar',
        'length' => '10',
        'description' => t('Week where this rule ends, same format as week_start.'),
      );

      foreach (_office_hours_day_names() as $abbr) {
        # Drupals db_type_map doesn't have time fields, so we override
        # it by selecting the field type for the individual databases.
        $columns[$abbr . '_open'] = array(
          'type' => 'varchar',
          'pgsql_type' => 'time',
          'mysql_type' => 'time',
        );
        $columns[$abbr . '_close'] = array(
          'type' => 'varchar',
          'pgsql_type' => 'time',
          'mysql_type' => 'time',
        );
      }

      return $columns;

    case 'form':
      $form = array();

      $form['allow_hours_past_midnight'] = array(
        '#type' => 'checkbox',
        '#title' => t('Allow hours past midnight'),
        '#required' => FALSE,
        '#default_value' => isset($field['allow_past_midnight']) ? $field['allow_past_midnight'] : 0,
        '#description' => t('Please note that this will work as long as the opening hours are not through midnight.'),
      );

      $form['display_none_as_closed'] = array(
        '#type' => 'checkbox',
        '#title' => t('Display days as closed'),
        '#default_value' => isset($field['display_none_as_closed']) ? $field['display_none_as_closed'] : 0,
        '#description' => t('Display days where no opening hours are displayed as “Closed”. Otherwise, they will not be listed at all.'),
      );

      return $form;

    case 'save':
      return array('allow_hours_past_midnight', 'display_none_as_closed');
  }
}

/**
 * Implementation of hook_field().
 */
function office_hours_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'load':
      // Attach office hours data to node.
      $additions = array();
      $week = office_hours_resolve_week($node, $field);
      $additions['seconds_to_closing'] = office_hours_opening_status($week);
      $additions['status'] = ($additions['seconds_to_closing']) ? 'open' : 'closed';
      $additions['week_data'] = array_shift($week);
      $additions['week'] = $week;
      return array($field['field_name'] . '_processed' => $additions);
    case 'presave':
      $days = _office_hours_day_names();
      // Unpack the array of open and close time, so they'll get stored
      // in the database.
      foreach ($items as $delta => $week) {
        foreach($days as $day) {
          if (isset($items[$delta][$day])) {
            $items[$delta][$day . '_open'] = sprintf('%02u:%02u', $items[$delta][$day]['open']['hours'], $items[$delta][$day]['open']['minutes']);
            $items[$delta][$day . '_close'] = sprintf('%02u:%02u', $items[$delta][$day]['close']['hours'], $items[$delta][$day]['close']['minutes']);
            unset($items[$delta][$day]);
          }
        }
      }
      break;
  }
}

/**
 * Implementation of hook_field_formatter_info().
 * Declare information about a formatter.
 */
function office_hours_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Week overview'),
      'field types' => array('office_hours'),
      'multiple values' => CONTENT_HANDLE_MODULE,
    ),
  );
}

/**
 * Implementation of hook_widget_info().
 */
function office_hours_widget_info() {
  return array(
    'office_hours_week' => array(
      'label' => t('Week overview'),
      'field types' => array('office_hours'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of FAPI hook_elements().
 */
function office_hours_elements() {
  module_load_include('elements.inc', 'office_hours');
  return _office_hours_elements();
}


/**
 * Implementation of hook_widget().
 */
function office_hours_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
    '#field_settings' => content_fields($field['field_name'], $form['#node']->type),
  );
  return $element;
}

/**
 * Implementation of hook_views_api().
 */
function office_hours_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'office_hours') . '/includes',
  );
}

/**
 * Page callback to change week via JavaScript.
 *
 * Returns the specified week for the specified field on the specified node.
 *
 * @param object $nids
 *    Node IDs we wan't to get hours for.
 * @param string $field_name
 *    Name of our CCK field.
 * @param string $week
 *    ISO-8601 identifier for the week (ie. 2009W23).
 */
function office_hours_page_get_week($nids, $field_name, $year, $week) {
  drupal_set_header('Content-Type: text/javascript; charset=utf-8');
  $output = array();

  // Sanitise our input.
  $field_name = preg_replace('/[^A-Za-z0-9_-]/', '', $field_name);
  $year = preg_replace('/[^\d]/', '', $year);
  $week = preg_replace('/[^\d]/', '', $week);

  if (!empty($nids) && !empty($field_name)) {
    if ($year < 2000 || $year > 3000) {
      $year = format_date($_SERVER['REQUEST_TIME'], 'custom', 'Y');
    }

    if ($week < 1 || $week > 53) {
      $week = format_date($_SERVER['REQUEST_TIME'], 'custom', 'W');
    }

    foreach (explode(',', $nids) as $nid) {
      $node = node_load($nid);

      // Tack the week we want onto the node, so we have it available in the
      // formatter without having to resort to global variables.
      $node->display_year = $year;
      $node->display_week = $week;

      if ($node) {
        $output['html'][$nid] = content_format($field_name, $node->$field_name, 'default', $node);
      }
    }
  }

  $output['year'] = $year;
  $output['week'] = $week;
  drupal_json($output);
}

/**
 * API function to determine whether a node is considered open by
 * looking at its office hours field(s).
 *
 * @param mixed $node
 *    Node object or node id.
 * @return boolean
 *    Opening status - true for open.
 */
function office_hours_node_is_open($node) {
  if ($node instanceof stdClass) {
    $fields = array();
  }
  elseif (is_numeric($node) && $node > 0) {
    $fields = array();
  }
  return FALSE;
}

/**
 * Parse user input time.
 *
 * @param string $input
 *    User text input.
 * @return array
 *    Array with hours/minutes values if successful, empty array if not.
 */
function office_hours_parse_time_input($input) {
  $result = array();
  $matches = array();

  // Strip spaces before trying to match.
  $input = str_replace(' ', '', $input);

  if (preg_match('/(\d{1,2})[:.](\d{2})/', $input, $matches)) {
    if ($matches[1] < 24 && $matches[2] < 60) {
      $result['hours'] = intval($matches[1]);
      $result['minutes'] = intval($matches[2]);
    }
  }

  return $result;
}

/**
 * Sanitise user week input.
 *
 * @param string $input
 *    User text input.
 * @return mixed
 *    Week in "2009W42" format or NULL if not valid.
 */
function office_hours_sanitise_week_input($input) {
  $matches = array();

  // Strip spaces before trying to match.
  $input = str_replace(' ', '', $input);

  if (preg_match('/(\d{4})W?(\d{2})/', $input, $matches)) {
    if ($matches[1] > 2000 && $matches[2] < 54) {
      return sprintf('%04uW%02u', intval($matches[1]), intval($matches[2]));
    }
  }

  return NULL;
}

/**
 * Helper function for week resolution.
 *
 * Resolves multiple values into a single value with one or more periods
 * per day, matching the current week or the one specified.
 *
 * @param object $node
 *    The node we're getting data for.
 * @param array $field
 *    The office_hours field instance.
 * @param string $week_spec
 *    The week that we're looking for specified in ISO 8601 format.
 *    Defaults to current week.
 * @return array
 *    An array with the first item being data about the week, and the
 *    rest being the individual week days.
 */
function office_hours_resolve_week($node, $field, $week_spec = NULL) {
  $week_num_year = (!is_null($week_spec)) ? $week_spec : _office_hours_week_to_iso();
  list($week_year, $week_num) = _office_hours_week_from_iso($week_num_year);
  $week_kind = ($week_num % 2) ? 'odd' : 'even';
  $values = array();
  $week = array('#data' => array(
    'number' => $week_num,
    'year' => $week_year,
    'year_and_number' => $week_num_year,
    'kind' => $week_kind,
  ));

  // If we have no field data, just return the week data.
  if (empty($node->$field['field_name'])) {
    return $week;
  }

  $pick = array();

  // Find the matching rule, starting from the highest delta value – so
  // that the last added rule should be the most specific.
  foreach (array_reverse($node->$field['field_name'], TRUE) as $delta => $item) {
    if (($item['scope'] == 'week_range' && $item['week_start'] <= $week_num_year && $item['week_end'] >= $week_num_year) ||
      ($item['scope'] == 'week' && $item['week_start'] == $week_num_year) ||
      ($item['scope'] == $week_kind) || # For even/odd.
      ($item['scope'] == 'all')) {
      $week['#rule']['scope'] = $item['scope'];
      $week['#rule']['week_start'] = $item['week_start'];
      $week['#rule']['week_end'] = $item['week_end'];
      $pick[$delta] = $item;
      break;
    }
  }

  // Then sort the multiple values into days.
  foreach (_office_hours_day_names() as $day) {
    foreach ($pick as $delta => $row) {
      if (!empty($row[$day . '_open'])) {
        $week[$day][$delta]['open'] = $row[$day . '_open'];
        $week[$day][$delta]['close'] = $row[$day . '_close'];
      }
    }
    if ($field['display_none_as_closed'] && !isset($week[$day])) {
      $week[$day] = array();
    }
  }
  return $week;
}

/**
 * Calcuate whether we're open.
 *
 * @param array $week
 *    The week array with data as calculated by office_hours_resolve_week.
 * @return integer
 *    Number of seconds until closing time or 0 if closed.
 */
function office_hours_opening_status($week) {
  // Finally, figure out whether we're open and if so, how long there
  // is till closing time.
  $day_name = strtolower(date('D', $_SERVER['REQUEST_TIME']));
  $today = date('Y-m-d', $_SERVER['REQUEST_TIME']);
  $status = FALSE;

  if (is_array($week[$day_name]) && (!empty($week[$day_name]))) {
    foreach($week[$day_name] as $delta => $day) {
      $now = $_SERVER['REQUEST_TIME'];
      $open = strtotime($day_name . $day['open']);
      $close = strtotime($day_name . $day['close']);
      if ($now > $open && $now < $close) {
        $status = $close - $now;
      }
    }
  }
  return $status;
}

/**
 * Format a time string like 19:00:00.
 */
function office_hours_format_time($time) {
  list($hours, $minutes, $seconds) = explode(':', $time);

  if (is_numeric($hours) && $hours >= 0 && $hours < 24) {
    return sprintf('%02u:%02u', $hours, $minutes);
  }
}

/**
 * Return short day names, in the same order used by date API so we can
 * use its sorting function.
 */
function _office_hours_day_names() {
  return array('sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat');
}

/**
 * Return the ISO-8601 weekday numbers.
 *
 * @return array
 *    Day number, keyed by their abbreviated day name.
 */
function _office_hours_iso_day_num() {
  return array(
    'mon' => 1, 'tue' => 2, 'wed' => 3, 'thu' => 4,
    'fri' => 5, 'sat' => 6, 'sun' => 7,
  );
}

/**
 * Find the start and end days that of a week.
 *
 * @param string $week
 *    Week/year in ISO-8601 format (ie. 2009W34).
 * @return array
 *    Timestamps for the start and end dates of the week.
 */
function _office_hours_week_days($week) {
  // TODO: This approach only works when we're following ISO-8601,
  // ie. the first day of the week is monday.
  $start = strtotime($week);
  $end = strtotime($week . 7);
  return array('start' => $start, 'end' => $end);
}

/**
 * Create ISO 8601 week specifier.
 *
 * @param integer $year
 * @param integer $week
 * @return string
 */
function _office_hours_week_to_iso($year=NULL, $week=NULL) {
  if (empty($year)) {
    $year = intval(date('Y'));
    $week = intval(date('W'));
  }
  return sprintf('%04uW%02u', $year, $week);
}

/**
 * Parse ISO 8601 week specifier.
 *
 * @param string $spec
 * @return array
 */
function _office_hours_week_from_iso($spec=NULL) {
  if (empty($spec)) {
    $spec = date('Y\WW');
  }
  return explode('W', $spec);
}

