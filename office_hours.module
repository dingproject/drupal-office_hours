<?php
// $Id: office_hours.module,v 1.1.2.1.2.4 2009-04-04 10:42:48 ozeuss Exp $

/**
 * @file office_hours.module
 * Creates a field and widget for inserting working or office hours per day
 */

/**
 * Implementation of hook_theme().
 */
function office_hours_theme() {
  return array(
    'office_hours_formatter_default' => array (
    	'arguments' => array('element' => NULL),
      'file' => 'office_hours.theme.inc',
    ),
    'office_hours_week' => array(
    	'arguments' => array('element' => NULL),
      'file' => 'office_hours.theme.inc',
    ),
    'office_hours_day' => array(
    	'arguments' => array('element' => NULL),
      'file' => 'office_hours.theme.inc',
    ),
    'office_hours_select' => array(
    	'arguments' => array('element' => NULL),
      'file' => 'office_hours.theme.inc',
    ),
    'office_hours_multiple_values' => array(
      'arguments' => array('element' => NULL),
      'file' => 'office_hours.theme.inc',
    ),
    'office_hours_format_day' => array(
      'arguments' => array('name' => NULL, 'start' => NULL, 'end' => NULL),
      'file' => 'office_hours.theme.inc',
    ),
  );
}

/**
 * Implementation of hook_init().
 */
function office_hours_init() {
    drupal_add_css(drupal_get_path('module', 'office_hours') .'/office_hours.css');
}

/**
 * Implementation of hook_content_is_empty().
 */
function office_hours_content_is_empty($item, $field) {
  if ( $item['starthours'] == 'none' || $item['endhours'] == 'none' || $item['day'] == 7)  {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_field_info().
 *
 * @return
 *   An array keyed by field type name. Each element of the array is an associative
 *   array with these keys and values:
 *   - "label": The human-readable label for the field type.
 */
function office_hours_field_info() {
  return array(
    'office_hours' => array(
    	'label' => 'Office Hours',
      'description' => t('Store office or opening hours in the database.'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 * Handle the parameters for a field.
 */
function office_hours_field_settings($op, $field) {
  switch ($op) {
    case 'database columns':
      $columns = array();
      $columns['scope'] = array(
        'type' => 'varchar',
        'length' => '10',
        'description' => t('Scope for this office hours record, one of "all", "odd", "even", or a ISO 8601 week number - like "2009W07"'),
      );
      foreach (_office_hours_day_names() as $abbr) {
        # Drupals db_type_map doesn't have time fields, so we override
        # it by selecting the field type for the individual databases.
        $columns[$abbr . '_start'] = array(
          'type' => 'varchar',
          'pgsql_type' => 'time',
          'mysql_type' => 'time',
        );
        $columns[$abbr . '_end'] = array(
          'type' => 'varchar',
          'pgsql_type' => 'time',
          'mysql_type' => 'time',
        );
      }
      return $columns;
      break;
    case 'form':
      $option_hour_list = date_hours();
      $form = array();
      $form['granularity'] = array(
        '#type' => 'select',
        '#title' => t('Granularity of time'),
        '#options' => array (
          0 =>t('Hours'),
          30=> t('Half hours'),
          15=> t('Quarter hours')
        ),
        '#default_value' => $field['granularity'] ? $field['granularity'] : 0,
        '#required' => FALSE,
        '#description' => t('Allow inserting quarter hours, half hours, or only hours of the day'),
      );
      $form['limit_start'] = array(
        '#type' => 'select',
        '#title' => t('Limit widget start hours'),
        '#options' => $option_hour_list,
        '#default_value' => $field['limit_start']? $field['limit_start'] : FALSE, 
        '#required' => FALSE,
        '#description' => t('Set the allowed start hours.'),
      );
      $form['limit_end'] = array(
        '#type' => 'select',
        '#title' => t('Limit widget end hours'),
        '#options' => $option_hour_list,
        '#default_value' => $field['limit_end'] ? $field['limit_end'] : FALSE,
        '#required' => FALSE,
        '#description' => t('Set the allowed end hours.'),
      );
      $form['validate_hours'] = array(
        '#type' => 'checkbox',
        '#title' => t('Validate hours'),
        '#required' => FALSE,
        '#default_value' => isset($field['validate_hours']) ? $field['validate_hours'] : 0,
        '#description' => t('Please note that this will work as long as the opening hours are not through midnight.'),
      );
      return $form;
     
    case 'validate':
      if ($field['limit_end'] <= $field['limit_start'] && !empty($field['limit_end']) && !empty($field['limit_start'])) {
        form_set_error('limit_end','Limit ending hours are earlier than start hours');
      }        
      break;

    case 'save':
      return array('granularity', 'limit_start', 'limit_end', 'validate_hours');
  }
}

/**
 * Implementation of hook_field().
 */
function office_hours_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'presave':
      // Unpack the array of start and end time, so they'll get stored
      // in the database.
      foreach ($items as $delta => $week) {
        foreach($week as $day => $values) {
          $items[$delta][$day . '_start'] = $values['start'];
          $items[$delta][$day . '_end'] = $values['end'];
        }
      }
      break;
  }
}

/**
 * Implementation of hook_field_formatter_info().
 * Declare information about a formatter.
 */
function office_hours_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Week overview'),
      'field types' => array('office_hours'),
      'multiple values' => CONTENT_HANDLE_MODULE,
    ),
  );
}

/**
 * Implementation of hook_widget_info().
 */
function office_hours_widget_info() {
  return array(
    'office_hours_week' => array(
      'label' => t('Week overview'),
      'field types' => array('office_hours'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of FAPI hook_elements().
 */
function office_hours_elements() {
  module_load_include('elements.inc', 'office_hours');
  return _office_hours_elements();
}


/**
 * Implementation of hook_widget().
 */
function office_hours_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}

/**
 * Implementation of hook_views_api().
 */
function office_hours_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'office_hours') . '/includes',
  );
}

/**
 * Format a time string like 19:00:00.
 */
function _office_hours_format_time($time) {
  $output = '';
  list($hours, $minutes, $seconds) = explode(':', $time);

  if (is_numeric($hours) && $hours >= 0 && $hours < 24) {
    $output = $hours;
    if (is_numeric($minutes) && $minutes > 0 && $minutes < 60) {
      $output .= '.' . $minutes;
    }
  }
  return $output;
}

/**
 * Return short day names, in the same order used by date API so we can
 * use its sorting function.
 */
function _office_hours_day_names() {
  return array('sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat');
}

