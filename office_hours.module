<?php
// $Id: office_hours.module,v 1.1.2.1.2.4 2009-04-04 10:42:48 ozeuss Exp $

/**
 * @file office_hours.module
 * Creates a field and widget for inserting working or office hours per day
 */

/**
 * Implementation of hook_theme().
 */
function office_hours_theme() {
  return array(
    'office_hours_formatter_default' => array (
    	'arguments' => array ('element' => NULL),
    ),
    'office_hours'  => array (
    	'arguments' => array ('element' => NULL),
    ),
    'office_hours_multiple_values' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

function office_hours_form_alter(&$form, &$form_state, $form_id) {
	if ($form_id == 'content_field_edit_form') {
		if($form['#field']['type'] == 'office_hours') {
			$description = t('Number of field that will show.');
 			$description .= '<br/><strong>'. t('Warning! Changing this setting after data has been created could result in the loss of data!') .'</strong>';
  			$form['field']['multiple'] = array(
    			'#type' => 'select',
    			'#title' => t('Number of values'),
    			'#options' => drupal_map_assoc(array(7,14)),
    			'#default_value' => isset($form['field']['multiple']) ? $form['field']['multiple'] : 7,
    			'#description' => $description,
  			);	
		}
	}
	if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id) {
		$type = content_types($form['#node']->type);
	//	dpm($form);dpm($type);
		foreach ($type['fields'] as $field) {
			if ($field['type'] == 'office_hours') {
				$form[$field['field_name']]['#theme'] = 'office_hours_multiple_values';
			}
		}
	}
}

/**
 * Implementation of hook_init().
 */
function office_hours_init() {
    drupal_add_css(drupal_get_path('module', 'office_hours') .'/office_hours.css');
}

/**
 * Implementation of hook_content_is_empty().
 */
function office_hours_content_is_empty($item, $field) {
  if ( $item['starthours'] == 'none' || $item['endhours'] == 'none' || $item['day'] == 7)  {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_field_info().
 *
 * @return
 *   An array keyed by field type name. Each element of the array is an associative
 *   array with these keys and values:
 *   - "label": The human-readable label for the field type.
 */
function office_hours_field_info() {
  return array(
    'office_hours' => array(
    	'label' => 'Office Hours',
      'description' => t('Store office or opening hours in the database.'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 * Handle the parameters for a field.
 */
function office_hours_field_settings($op, $field) {
  switch ($op) {
    case 'database columns':
      $columns = array();
      $columns['scope'] = array(
        'type' => 'varchar',
        'length' => '10',
        'description' => t('Scope for this office hours record, one of "all", "odd", "even", or a ISO 8601 week number - like "2009W07"'),
      );
      foreach (array_keys(_office_hours_day_names()) as $abbr) {
        $columns[$abbr . '_start'] = array(
          'type' => 'varchar',
          'pgsql_type' => 'time',
          'mysql_type' => 'time',
        );
        $columns[$abbr . '_end'] = array(
          'type' => 'varchar',
          'pgsql_type' => 'time',
          'mysql_type' => 'time',
        );
      }
      return $columns;
      break;
    case 'form':
    $options = _create_hours_arr($field, FALSE);
    $optlim = _create_hours_arr($field);
      $form = array();
      $form['hoursformat'] = array(
        '#type' => 'select',
        '#title' => t('Hours format'),
        '#options' => array (t('24 hrs.'), t('12 hrs')),
        '#default_value' => $field['hoursformat'] ? $field['hoursformat'] : 0,
        '#required' => FALSE,
        '#description' => t('Format of the clock. IMPORTANT NOTE: if you do not select "Multiple values", you can enter only one day.'),
      );
      $form['granularity'] = array(
        '#type' => 'select',
        '#title' => t('granularity of time'),
        '#options' => array ( 0 =>t('Hours'), 30=> t('Half hours'), 15=> t('Quarter hours')),
        '#default_value' => $field['granularity'] ? $field['granularity'] : 0,
        '#required' => FALSE,
        '#description' => t('Allow inserting quarter hours, half hours, or only hours of the day'),
      );
       $form['limitstart'] = array(
        '#type' => 'select',
        '#title' => t('Limit widget start hours'),
        '#options' => $options,
        '#default_value' => $field['limitstart']? $field['limitstart'] : FALSE, 
        '#required' => FALSE,
        '#description' => t('Set the allowed start hours. Note: if you just changed the clock format, please submit before changing this.'),
      );
       $form['limitend'] = array(
        '#type' => 'select',
        '#title' => t('Limit widget end hours'),
        '#options' => $options,
        '#default_value' => $field['limitend'] ? $field['limitend'] : FALSE,
        '#required' => FALSE,
        '#description' => t('Set the allowed end hours. Note: if you just changed the clock format, please submit before changing this'),
      );
       /* $form['defaultstart'] = array(
        '#type' => 'select',
        '#title' => t('Start hours default'),
        '#options' => $optlim,
        '#default_value' => $field['defaultstart']? $field['defaultstart'] : FALSE, 
        '#required' => FALSE,
        '#description' => t('Use this field if you want for specific hours to show by default. Set this AFTER submitting hour limits.'),
      );
       $form['defaultend'] = array(
        '#type' => 'select',
        '#title' => t('End hours default'),
        '#options' => $optlim,
        '#default_value' => $field['defaultend'] ? $field['defaultend'] : FALSE,
        '#required' => FALSE,
        '#description' => t('Use this field if you want for specific hours to show by default Set this AFTER submitting hour limits.'),
      );*/
      $form['valhrs'] = array(
        '#type' => 'checkbox',
        '#title' => t('Validate hours'),
        '#required' => FALSE,
        '#default_value' => isset($field['valhrs']) ? $field['valhrs'] : 0,
        '#description' => t('Please note that this will work as long as the opening hours are not through midnight.'),
      );
      return $form;
     
  case 'validate':
        /*if ($field['defaultend']<= $field['defaultstart'] && $field['defaultend'] !='none' && $field['defaultstart'] !='none') {
          form_set_error('defaultend','Default ending hours are earlier than start hours');
        }*/
        if ( $field['limitend'] <= $field['limitstart'] && $field['limitend'] != 'none'  && $field['limitstart'] !='none') {
            form_set_error('limitend','Limit ending hours are earlier than start hours');
        }
        
     break;

    case 'save':
      return array('hoursformat', 'granularity', 'limitstart', 'limitend', 'valhrs');

    case 'database columns':
      $columns = array(
        'day' => array('type' => 'int', 'not null' => FALSE, 'sortable' => TRUE),
        'starthours' => array('type' => 'int', 'not null' => FALSE, 'sortable' => TRUE),
        'endhours' => array('type' => 'int', 'not null' => FALSE, 'sortable' => TRUE),

      );
      return $columns;
    break;
      
      case 'views data':
      //$allowed_values = content_allowed_values($field);
      //if (count($allowed_values)) {
        //$data = content_views_field_views_data($field);
        $data = _office_hours_views_field_views_data($field);
        //drupal_set_message("<pre>".print_r($data,true)."<pre>");
        $db_info = content_database_info($field);
        $table_alias = content_views_tablename($field);
        // Swap the filter handler to the 'in' operator.
       $data[$table_alias][$field['field_name'] .'_day']['filter']['handler'] = 'office_hours_handler_filter_day';
       $data[$table_alias][$field['field_name'] .'_starthours']['filter']['handler'] = 'office_hours_handler_filter_hours';
       $data[$table_alias][$field['field_name'] .'_endhours']['filter']['handler'] = 'content_handler_filter_numeric';
    #    $data[$table_alias][$field['field_name'] .'_starthours']['filter']['numeric'] = TRUE;
    #    $data[$table_alias][$field['field_name'] .'_endhours']['filter']['numeric'] = TRUE;
        return $data;
			//}
			break;
  }
}

/**
 * Implementation of hook_field().
 */
function office_hours_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'validate':
      // drupal_set_message('<pre>'.print_r($field,true).'</pre>');
      foreach ($items as $delta => $item) {
        if (isset($field['valhrs']) ) {
          if (!empty($item['starthours']) && !empty($item['endhours']) ) {
            $error_field = $field['field_name'] .']['. $delta .'][endhours';
            /* $starthours = _office_hours_tf_to_mil($item['starthours']);
            $endhours = _office_hours_tf_to_mil($item['endhours']);*/
            if ($item['starthours'] > $item['endhours']) {
              form_set_error($error_field, t('Closing hours are earlier than opening hours'));
            }
          }
        }
      }
    break;
  }
}

/**
 * Implementation of hook_field_formatter_info().
 * Declare information about a formatter.
 */
function office_hours_field_formatter_info() {
  return array(
    'default' => array(
      'label' => 'week overview',
      'field types' => array('office_hours'),
      'multiple values' => CONTENT_HANDLE_MODULE,
    ),
  );
}

/**
 * Theme function for 'default' text field formatter.
 */
function theme_office_hours_formatter_default($element) {   
  $items = array();
  $first = variable_get('date_first_day',0); 
  $field = content_fields($element['#field_name'], $element['#type_name']);
  $output = '';
  $days = array(0 => t('Sunday'), 1 => t('Monday'), 2 => t('Tuesday'),3 => t('Wednesday'), 4 => t('Thursday'), 5 => t('Friday'), 6 => t('Saturday') );
  foreach (element_children($element) as $key => $arraykey) {
    $item = $element[$arraykey]['#item'];
    $day = $days[check_plain($element[$arraykey]['#item']['day'])];
    if (isset($day)) { 
 			$endhrs = _office_hours_mil_to_tf(check_plain($item['endhours']));
    	$strhrs = _office_hours_mil_to_tf(check_plain($item['starthours']));  
			if ($field['hoursformat']== 1) {
     		$endhrs = _office_hours_convert_to_ampm($endhrs);
      	$strhrs = _office_hours_convert_to_ampm($strhrs);
    	}
    	$items[$day][] = array('strhrs' => $strhrs,'endhrs' => $endhrs) ;//we're aggregating hours for days together.	
		}   
  }
  
  $keys = array_keys($items);
  if ($keys[0] != $days[$first]) {
   while ($keys[0] != $days[$first] && count($keys)>1):   
    $shifted = array_shift($items);
    $items[$keys[0]] = $shifted;
    $keys = array_keys($items);
  endwhile;
  }
  
  foreach ($items as $day => $val) {
  	$strhrs = $val[0]['strhrs'];
  	$endhrs = $val[0]['endhrs'];
  	$strhrs2 = $val[1]['strhrs'];
  	$endhrs2 = $val[1]['endhrs'];
		$additional = (isset($val[1])) ? ' <span class="oh-display-hours">, '.$strhrs2.' - '.$endhrs.'</span>' : '';
  	$output .= '<div class="oh-display">'.$day.'- <span class="oh-display-hours">'.$strhrs.' - '.$endhrs.'</span>'.$additional.'</div>';
  }
  return $output;     
}

function office_hours_widget_info() {
  return array(
    'office_hours' => array(
      'label' => t('Office Hours'),
      'field types' => array('office_hours'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
        ),
    ),
  );
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 */
function office_hours_elements() {
  return array(
    'office_hours' => array(
      '#input' => TRUE,
      '#columns' => array('day', 'starthours', 'endhours'),
      '#delta' => 0,
      '#process' => array('office_hours_field_process'),
      '#element_validate' => array('_office_hours_validate'),
      ),
    );
}

function theme_office_hours($element) { 
  return $element['#children'];
}

/**
 * Implementation of hook_widget().
 */
function office_hours_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function office_hours_field_process($element, $edit, $form_state, $form) { 
  $iteration = $element['#weight'];
  $field = $form['#field_info'][$element['#field_name']];
  if ($field['multiple'] > 7) {
		$day = ($iteration == 0) ? 0 :(($iteration & 1) ? ($iteration-1)/2 : $iteration/2);
	}
  else {
  	$day = $iteration;
 }
  $field_day = $element['#columns'][0];
  $field_strhrs = $element['#columns'][1];
  $field_endhrs = $element['#columns'][2];  
  $delta = $element['#delta'];
  $optionshr= _create_hours_arr($field, TRUE);
  $optionday= array(0 => t('Sunday'), 1 => t('Monday'), 2 => t('Tuesday'),3 => t('Wednesday'), 4 => t('Thursday'), 5 => t('Friday'), 6 => t('Saturday'), 7=> t('None'));
 $element['#prefix'] = '<div class="office-hours-block" style="display:inline">';
 
 if ( $field['multiple'] == '7' || ($field['multiple'] == '14' && !($iteration & 1 )) ) {
    $element['#prefix'] .= t($optionday[$day]);
  }
  else {
     $element['#prefix'] .= t('Additional hours:');
  }
  
  $element['#suffix'] = '</div>';

  $element[$field_day] = array(
    '#type' => 'value',
    '#value' => $day,
 );
 $element[$field_strhrs] = array(
    '#type' => 'select',
    '#title' => t('Open from'),
    '#description' => t($field['widget']['description']),
    '#options' => $optionshr,
    '#required' => $field['required'],
    '#default_value' => ($element['#value']['day'] == $day && isset($element['#value'][$field_strhrs])) ? $element['#value'][$field_strhrs] : '',
 );
 $element[$field_endhrs] = array(
    '#type' => 'select',
    '#title' => t('Until').$suffix,
    '#description' => t($field['widget']['description']),
    '#options' =>  $optionshr,
    '#required' => $field['required'],
    '#default_value' => ($element['#value']['day'] == $day && isset($element['#value'][$field_endhrs])) ? $element['#value'][$field_endhrs] : '',
 );
  $form_state['#field_info'][$field['field_name']] = $field;
  return $element;
}

/**
 * copied from content module's theme_content_multiple values- we're taking out the draggable feature.
 * Theme an individual form element.
 *
 */
function theme_office_hours_multiple_values($element) {
  $field_name = $element['#field_name'];
  $field = content_fields($field_name);
  $output = '';

  if ($field['multiple'] >= 1) {
    $table_id = $element['#field_name'] .'_values';
    $order_class = $element['#field_name'] .'-delta-order';
    $required = !empty($element['#required']) ? '<span class="form-required" title="'. t('This field is required.') .'">*</span>' : '';

    $header = array(
      array(
        'data' => t('!title: !required', array('!title' => $element['#title'], '!required' => $required)),
        'colspan' => 2
      ),
     // t('Order'),
    );
    $rows = array();

    // Sort items according to '_weight' (needed when the form comes back after
    // preview or failed validation)
    $items = array();
    foreach (element_children($element) as $key) {
      if ($key !== $element['#field_name'] .'_add_more') {
        $items[] = &$element[$key];
      }
    }
    usort($items, '_content_sort_items_value_helper');
    $items = _office_hours_arrange_day($items);
    // Add the items as table rows.
    foreach ($items as $key => $item) {
      $item['_weight']['#attributes']['class'] = $order_class;
      $delta_element = drupal_render($item['_weight']);
      $cells = array(
        array('data' => '', 'class' => 'content-multiple-drag'),
        drupal_render($item),
        //array('data' => $delta_element, 'class' => 'delta-order'),
      );
      
      $rows[] = array(
        'data' => $cells,
        //'class' => 'draggable',
      );
    }

    $output .= theme('table', $header, $rows, array('id' => $table_id, 'class' => 'content-multiple-table'));
    $output .= $element['#description'] ? '<div class="description">'. $element['#description'] .'</div>' : '';
    $output .= drupal_render($element[$element['#field_name'] .'_add_more']);

    //drupal_add_tabledrag($table_id, 'order', 'sibling', $order_class);
  }
  else {
    foreach (element_children($element) as $key) {
      $output .= drupal_render($element[$key]);
    }
  }

  return $output;
}

/**
 * Implementation of hook_views_api().
 */
function office_hours_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'office_hours') . '/includes',
  );
}

function _office_hours_arrange_day ($items) {
  $first = variable_get('date_first_day',0); 
    while ($first > 0) :
      $shifted = array_shift($items);
      $items[] = $shifted;
      if (isset($items[13])) {
        $shifted = array_shift($items);
        $items[] = $shifted;
      }
      $first--;
    endwhile;
  return $items;
}

/**
 * helper function to create hours array.
 * items are saved in 24 hours string format (i.e '18:00').
 */
function _create_hours_arr($field = array(), $limit = TRUE) {  
	if (empty($field)) { //TODO: show 24/12 hrs according to system time format
		$field['limitstart'] = 'none';
		$field['limitend'] = 'none';
		$field['hoursformat'] = 0;
		$field['granularity'] = 60;
 }
 
 $fl1 = $field['limitstart'];
 $fl2 = $field['limitend'];
 $gran = ($field['granularity'] == 0) ? 60 : $field['granularity'];
 $limst = 0; $limend=23; $mins='00'; $mine=60;

  if ($limit === TRUE) {
    if ($fl1 != 'none') {
      $limst = substr($fl1,0,-2);
      $mins = substr($fl1,-2);
    }
    if ($fl2 != 'none') {
      $limend = substr($fl2,0,-2);
      $mine = substr($fl2,-2);
    }
  }
 $ophours['none'] = t('None');
 
  if ($field['hoursformat'] == 1) {   //12-hour clock
    foreach (range($limst,$limend) as $i) { 
      $mincounter = ($i == $limst) ? $mins : 0; //in the first iteration, start the count according to limst. if not, begin from 0
      for(; $mincounter <= 45; $mincounter=$mincounter+$gran) { 
        if (!($i == $limend && $mincounter>$mine)) { //last iteration
          $mincounter= ($mincounter == 0)? '00' : $mincounter; //preparing the mincounter for use in a string
          $tf = $i.':'.$mincounter;
          $mil = $i.$mincounter;
          $ophours[$mil] = _office_hours_convert_to_ampm($tf);
        }
      }
    }
  }
        
  else { //24-hour clock
      foreach (range($limst,$limend) as $i) { 
        $mincounter = ($i == $limst) ? $mins : 0; 
      for(; $mincounter<=45; $mincounter = $mincounter+$gran) {
        if (!($i == $limend && $mincounter>$mine)) {
          $mincounter = ($mincounter == 0)? '00' : $mincounter;
          $tf = $i.':'.$mincounter;
          $mil = $i.$mincounter;
          $ophours[$mil] = $tf;
        }
      }
    }
   }
   return $ophours;
}

/**
 * Helper function for conversion of clock format.
 */
function _office_hours_convert_to_ampm($hour) {
  list($hr, $min)= explode(":",$hour);
  if ($hr== '0') { // midnight
    $hr=12;
    $ampm= ' AM';
  }
  elseif ($hr== 12) { // noon
    $hr=12;
    $ampm= ' PM';
  }
  elseif ($hr>12 && $hr<24) { // a pm time
    $hr= $hr-12;
    $ampm= ' PM';
  }
  else {
    $ampm=' AM';
  }
  
return $hr.':'.$min.$ampm ;
}

function _office_hours_tf_to_mil($hour) {
  if (strstr($hour,':') == FALSE || is_null($hour)) return $hour;
  list($hr, $min) = explode(":",$hour);
  $hr = $hr*60+$min;
  return $hr;
}

function _office_hours_mil_to_tf($hour){
return substr($hour,0,-2).":".substr($hour,-2);
}

 /**
 * Adding all table field into $data in hook_views_data.
 */
function _office_hours_views_field_views_data($field) {
  $field_types = _content_field_types();
    $db_info = content_database_info($field);

    // Field modules that do not store data in the database
    // should not create views data tables.
    if (empty($db_info['columns'])) {
      return;
    }

    $table_alias = content_views_tablename($field);

    $types = array();
    foreach (content_types() as $type) {
      if (isset($type['fields'][$field['field_name']])) {
        $types[] = $type['name'];
      }
    }

    $data = array();
    $data['table']['group']  = t('Content');
    $data['table']['join']['node'] = array(
      'table' => $db_info['table'],
      'left_field' => 'vid',
      'field' => 'vid',
    );

    $columns = array();
    $arguments = array();
    $filters = array();
    foreach ($db_info['columns'] as $column => $attributes) {
      $columns[] = $attributes['column'];
      $sorts[] = !empty($attributes['sortable']) ? TRUE : FALSE;

      // Identify likely filters and arguments for each column based on field type.
      switch ($attributes['type']) {
        case 'int':
        case 'mediumint':
        case 'tinyint':
        case 'bigint':
        case 'serial':
          $filters[] = 'content_handler_filter_numeric';
          $arguments[] = 'content_handler_argument_numeric';
          break;
        case 'numeric':
        case 'float':
          $filters[] = class_exists('views_handler_filter_float') ? 'content_handler_filter_float' : 'content_handler_filter_numeric';
          $arguments[] = 'content_handler_argument_numeric';
          break;

        case 'text':
        case 'blob':
          // TODO add markup handlers for these types
        default:
          $filters[] = 'content_handler_filter_string';
          $arguments[] = 'content_handler_argument_string';
          break;
      }
    }
$i=0;
    // Ensure all columns are retrieved,
    $additional_fields = drupal_map_assoc($columns);
		foreach($columns as $key => $column) {
    $data[$column] = array(
      'group' => t('Content'),
      'title' => t($field_types[$field['type']]['label']) .': '. t($field['widget']['label']) . ' ('. $field['field_name'] .')',
      'help' =>  t($field_types[$field['type']]['label']) .' - '. t('Appears in: @types', array('@types' => implode(', ', $types))),
      'field' => array(
        'field' => $column,
        'table' => $db_info['table'],
        'handler' => 'content_handler_field_multiple',
        'click sortable' => $sorts[$i],
       // 'additional fields' => $additional_fields,
        'content_field_name' => $field['field_name'],
        'allow empty' => TRUE,
        // Access control modules should implement content_views_access_callback().
        'access callback' => 'content_views_access_callback',
        'access arguments' => array($field),
      ),
      'argument' => array(
        'field' => $column,
        'table' => $db_info['table'],
        'handler' => $arguments[$i],
        'click sortable' => $sorts[$i], // TODO used in once place in node.views.inc, should we use it here?
        'name field' => '', // TODO
        //'additional fields' => $additional_fields,
        'content_field_name' => $field['field_name'],
        'empty field name' => t('<No value>'),
        'allow empty' => TRUE,
      ),
      'filter' => array(
        'field' => $column,
        'title' => t($field['widget']['label']),
        'table' => $db_info['table'],
        'handler' => $filters[$i],
        //'additional fields' => $additional_fields,
        'content_field_name' => $field['field_name'],
        'allow empty' => TRUE,
      ),
    );
    $i++;
    }
    // TODO do we need different handling for sorts with Views 2,
    // especially when relationships are involved?
    if (!empty($sorts[$i])) {
      $data[$column]['sort'] = array(
        'field' => $column,
        'table' => $db_info['table'],
        'handler' => 'content_handler_sort',
       // 'additional fields' => $additional_fields,
        'content_field_name' => $field['field_name'],
        'allow empty' => TRUE,
      );
    }
   $data['field_hours_day']['title'] .= t("- Day");
   $data['field_hours_day']['help'] .= t("- Day");
   $data['field_hours_day']['filter']['title'] .= t("- Day");
   $data['field_hours_starthours']['title'] .= t("- opening hours");
   $data['field_hours_starthours']['help'] .= t("- Opening hours");
   $data['field_hours_starthours']['filter']['title'] .= t("- opening hours");
   $data['field_hours_endhours']['filter']['title'] .=  t("- closing hours");
   $data['field_hours_endhours']['title'] .=  t("- Closing hours");
   $data['field_hours_endhours']['help'] .=  t("- Closing hours");
    // TODO: provide automatic filters, sorts, and arguments for each column, not just the first?
    return array($table_alias => $data);
}

/**
 * Return day names, keyed by their abbreviation.
 */
function _office_hours_day_names() {
  return array(
    'sun' => t('Sunday'),
    'mon' => t('Monday'),
    'tue' => t('Tuesday'),
    'wed' => t('Wednesday'),
    'thu' => t('Thursday'),
    'fri' => t('Friday'),
    'sat' => t('Saturday'),
  );
}

